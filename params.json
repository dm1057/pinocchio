{"name":"Pinocchio","tagline":"Git based server provisioning.","body":"# [Pinocchio] - A git puppet.\r\n\r\nA minimalist tool for Git based server provisioning.\r\n\r\n![Pinocchio](https://gist.github.com/vic/3494d261c68cb3b591e6/raw/acdbcdeb06606ee8a833e992e135bec6db34ecac/pinocchio.jpg)\r\n\r\n### Why?\r\n\r\nServer configuration and software provisioning should be damn simple.\r\n\r\nThere are lots of tools for helping you install and configure your\r\nfull software stack at your new and shiny cloud based slice. Just to name\r\na few, we have [Puppet], [Chef], and the [Capistrano] based [Sprinkle].\r\nAll of them trying to solve the problem of automating software installation\r\nand configuration on many servers. Basically you write a _recipe_ file \r\ncontaining instructions on how to install or configure something, some of\r\nthese recipes require you to learn their respective mini/dsl language, \r\nsome of them even require you to host those recipes on a service of their\r\nown.\r\nSure these tools all have their own merit and can be useful when managing\r\nlots of servers, but for me, they were sometimes just like too much complex\r\nwhen I just wanted to provision a new slice to get more fun at coding a \r\nnew experiment.\r\n\r\nI just wanted to have some dead simple way of uploading a new configuration\r\nfile or instructions for the server on how to install something. I wanted to\r\ndeliver these just like I'm used with regular code, by using git. \r\nI wanted to push and see *only* the new pending instructions being executed\r\non my remote slices. I wanted to have all of it versioned and under control.\r\nI wanted these changes to be incremental, something like using rails database\r\nmigrations but for provisioning my servers.\r\n\r\nSo [Pinocchio] was born.\r\n\r\n### How it works\r\n\r\n[Pinocchio] is just a simple git `update` hook. It works by determining which\r\nchanges it needs to execute since the last successful update. \r\nIt does it by leveraging on git to know which *migrations* need to be run, and only when _*all*_ of these pending migrations have a successful exit status the git repo is updated.\r\n\r\n### Installation\r\n\r\n[Pinocchio] is just a simple git update hook, all it needs is that\r\nyou place the contents of `hooks/pinocchio` on your remote\r\nrepo under `hooks/update` and make it executable and you're set. \r\n\r\nHowever as you might want to avoid doing things by hand, we provide a simple\r\nhelper script `bin/pinocchio`, you can download to your workstation and \r\njust make it executable.\r\n\r\n```shell\r\ncurl http://raw.github.com/vic/pinocchio/master/bin/pinocchio > /usr/local/bin/pinocchio\r\nchmod 755 /usr/local/bin/pinocchio\r\n```\r\n\r\nIn the following examples we assume the remote repo is hosted at \r\n*my-new-slice* with user *ubuntu* at the *~/pinocchio* directory.\r\n\r\nOn your server's side, all you need is make sure git is installed and the\r\npinocchio's update hook is enabled on the remote repo.\r\n\r\n###### Automated setup on server\r\n\r\nThe `pinocchio install` command can automatically setup Pinocchio for you\r\non your remote server. Essentially it just checks that git is installed\r\nor installs it for you if it can and then creates a new git bare repo at\r\nthe specified directory, copying the [Pinocchio] update hook and making it\r\nexecutable.\r\n\r\n```shell\r\n$ pinocchio install '~/pinocchio' ubuntu@my-new-slice\r\n```\r\n\r\n###### Manual setup on server\r\n\r\n```shell\r\n# install git unless you already have it on your remote server\r\n$ ssh ubuntu@my-new-slice 'sudo apt-get install git'\r\n\r\n# create a remote repo for pinocchio and install the update hook\r\n$ cat hooks/pinocchio | ssh ubuntu@my-new-slice 'git init --bare ~/pinocchio && cat -> ~/pinocchio/hooks/update && chmod 755 ~/pinocchio/hooks/update'\r\n```\r\n\r\n### Usage\r\n\r\nYou create your provisioning _migrations_ under the `migrate/` directory.\r\n\r\n```\r\nREADME\r\nmigrate/\r\n        201311051200-install-nginx.sh\r\n        201311051205-install-rvm.sh\r\netc/\r\n        nginx.conf\r\n```\r\n\r\n[Pinocchio] migrations are language agnostic, they can be just shell scripts\r\nas well as python or ruby or whatever your server can execute. The only\r\nrequisite is these files _need to be executable_ and exit with *zero status* when successful. \r\nI highly recommend to prefix the migration files with a timestamp as Pinocchio will try to run them in natural order.\r\n\r\nTo aid with timestamps you can use the `pinocchio generate` command:\r\n\r\n```shell\r\n$ pinocchio generate install-rvm.sh\r\n  Generated migrate/201311051205-install-rvm.sh\r\n```\r\n\r\nThe etc directory is not even required, you can place all other files\r\nwherever you want, and simply use them inside the migration files. \r\nIn this example the nginx installation shell script could perform something like:\r\n`sudo cp ./etc/nginx.conf /opt/nginx`\r\n\r\nAfter your migrations are ready, you can just push to your remote server and\r\nsee pending migrations run.\r\n\r\n```shell\r\n$ git push\r\n  ...\r\n  remote: Applying 201311051200-install-nginx.sh\r\n  remote: Applying 201311051205-install-rvm.sh\r\n```\r\n\r\nIf all migrations run successfully, the code is updated and next time only\r\nnew migrations will be executed.\r\n\r\n### Contributing\r\n\r\nFeel free to contribute issues, ideas, pull-requests to [http://github.com/vic/pinocchio/issues](http://github.com/vic/pinocchio/issues) \r\n\r\n### Testimonies\r\n\r\n> Just another puppet who loves using this simple tool to improve their infrastructure and development process:\r\n>\r\n![Infraestructur](https://gist.github.com/vic/3494d261c68cb3b591e6/raw/ab4c364f0016fc2f041b86dd842c07515d5dc758/infraestructur.png)\r\n![Development process](https://gist.github.com/vic/3494d261c68cb3b591e6/raw/505e8b0cc8c3515810d26750da90cd9df11b0e00/development.png)\r\n\r\n\r\n### License\r\n\r\nMIT\r\n\r\n[Puppet]: http://puppetlabs.com\r\n[Chef]: http://docs.opscode.com/index.html\r\n[Capistrano]: http://www.capistranorb.com/\r\n[Sprinkle]: https://github.com/sprinkle-tool/sprinkle\r\n[Pinocchio]: http://github.com/vic/pinocchio\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}